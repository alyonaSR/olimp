#include <iostream>
#include <vector>
#include <string>
#include <queue>
  
  
using namespace std;
  
using ll = long long;
  
const int dr[] = {0, 0, 1, -1};
const int dc[] = {1, -1, 0, 0};
  
void bfs(vector<vector<int>> &a, vector<vector<int>> &d, int &ans, int x, int y){
    int n = a.size();
      
    queue<pair<int, int>> q;
    q.push(make_pair(x, y));
    d[x][y] = 0;
      
    while(!q.empty()){
        auto [r, c] = q.front();
        q.pop();
          
        for(int i = 0; i < 4; i++){
            int rto = r + dr[i];
            int cto = c + dc[i];
              
            if (rto < 0 || rto >= n || cto < 0 || cto >= n){
                ans++;
                continue;
            }
            if (a[rto][cto]){
                ans++;
            }
              
            if (d[rto][cto] == -1 && !a[rto][cto]) {
                d[rto][cto] = 0;
                q.push(make_pair(rto, cto));
            }
             
        }
    }
}
  
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    int n;
    cin >> n;
      
    vector<vector<int>> a(n, vector<int>(n));
    vector<vector<int>> d(n, vector<int>(n, -1));
      
    for(int i = 0; i < n; i++){
        string s;
        cin >> s;
        for(int j = 0; j < n; j++){
            a[i][j] = (s[j] == '#');
        }
    }
     
     
    int ans = 0;
    bfs(a, d, ans, 0, 0);
 
    if (d[n - 1][n - 1] == -1)  bfs(a, d, ans, n - 1, n - 1);
     
    cout << (ans - 4) * 25 << endl;
        return 0;
}
