#include <iostream>
#include <vector>
#include <string>
#include <queue>


using namespace std;

using ll = long long;

const int dr[] = {0, 0, 1, -1};
const int dc[] = {1, -1, 0, 0};

void bfs(vector<vector<int>> &a, vector<vector<int>> &d, int x, int y){
    int n = a.size();
    
    queue<pair<int, int>> q;
    q.push(make_pair(x, y));
    d[x][y] = 0;
    
    while(!q.empty()){
        auto [r, c] = q.front();
        q.pop();
        
        for(int i = 0; i < 4; i++){
            int rto = r + dr[i];
            int cto = c + dc[i];
            
            if (rto < 0 || rto >= n || cto < 0 || cto >= n){
                continue;
            }
            if (a[rto][cto] || d[rto][cto] != -1){
                continue;
            }
            
            d[rto][cto] = d[r][c] + 1;
            q.push(make_pair(rto, cto));
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
  
    int n, x = 0, y = 0, x1 = 0, y1 = 0;
    cin >> n;
    
    vector<vector<char>> ans(n, vector<char>(n));
    vector<vector<int>> a(n, vector<int>(n));
    vector<vector<int>> d(n, vector<int>(n, -1));
    
    for(int i = 0; i < n; i++){
        string s;
        cin >> s;
        for(int j = 0; j < n; j++){
            if (s[j] == 'X'){
                x = i;
                y = j;
            }
            if (s[j] == '@'){
                x1 = i;
                y1 = j;
            }
            a[i][j] = (s[j] == 'O');
            ans[i][j] = s[j];
        }
    }
    bfs(a, d, x, y);
    if (d[x1][y1] != -1){
        cout << "Y" << "\n";
        while (true){
            if(x1 - 1 >= 0 && x1 - 1 < n && d[x1 - 1][y1] >= 0 && d[x1 - 1][y1] + 1 == d[x1][y1]){
                x1--;
                ans[x1][y1] = '+';
            }
            if(y1 - 1 >= 0 && y1 - 1 < n && d[x1][y1 - 1] >= 0 &&  d[x1][y1 - 1] + 1 == d[x1][y1]){
                y1--;
                ans[x1][y1] = '+';
            }
            if(y1 + 1 >= 0 && y1 + 1 < n && d[x1][y1 + 1] >= 0 && d[x1][y1 + 1] + 1 == d[x1][y1]){
                y1++;
                ans[x1][y1] = '+';
            }
            if(x1 + 1 >= 0 && x1 + 1 < n && d[x1 + 1][y1] >= 0 && d[x1 + 1][y1] + 1 == d[x1][y1]){
                x1++;
                ans[x1][y1] = '+';
            }
            if(x1 == x && y1 == y){
                ans[x][y] = '+';
                break;
            }
        }
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                cout << ans[i][j];
            }
            cout << endl;
        }
    }
    else cout << "N" << "\n";
    return 0;
}

