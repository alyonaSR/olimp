#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

using namespace std;

using ll = long long;

int n;
vector<pair<ll, ll>> a;
vector<ll> s;

bool dfs(ll i, ll p, vector<int> &used) {
    used[i] = 1;
    
    for (int next = 0; next < n; next++) {
        if (used[next] == 0 && p * s[i] >= abs(a[i].first - a[next].first) + abs(a[i].second - a[next].second)) {
            dfs(next, p, used);
        }
    }
    
    for (int i = 0; i < n; i++) {
        if (used[i] == 0) {
            return false;
        }
    }
    
    return true;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;
    
    for (int i = 0; i < n; i++) {
        int x, y, c;
        cin >> x >> y >> c;
        a.push_back(make_pair(x, y));
        s.push_back(c);
    }
    
    ll l = 0, r = 40000000000000;
    
    while (r > l + 1) {
        ll mid = (l + r) / 2;
        bool ans = false;
        for(int i = 0; i < n; i++){
            vector<int> used(n, 0);
            bool k = dfs(i, mid, used);
            if(k){
                ans = true;
            }
                  
        }
        if (ans) {
            r = mid;
        } else {
            l = mid;
        }
    }
    
    cout <<  r << "\n";
    
    return 0;
}

