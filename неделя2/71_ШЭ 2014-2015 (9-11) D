#include <iostream>
#include <vector>
#include <string>
#include <queue>


using namespace std;

using ll = long long;

const int dr[] = {0, 0, 1, -1};
const int dc[] = {1, -1, 0, 0};

void bfs(vector<vector<int>> &a, vector<vector<int>> &d, int x, int y){
    int n = a.size();
    int m = a[0].size();
    
    queue<pair<int, int>> q;
    q.push(make_pair(x, y));
    d[x][y] = 0;
    
    while(!q.empty()){
        auto [r, c] = q.front();
        q.pop();
        
        for(int i = 0; i < 4; i++){
            int rto = r + dr[i];
            int cto = c + dc[i];
            
            if (rto < 0 || rto >= n || cto < 0 || cto >= m){
                continue;
            }
            if (a[rto][cto] || d[rto][cto] != -1){
                continue;
            }
            
            d[rto][cto] = d[r][c] + 1;
            q.push(make_pair(rto, cto));
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
  
    int n, m, x = 0, y = 0;
    cin >> n >> m;
    
    vector<vector<int>> a(n, vector<int>(m));
    vector<vector<int>> d(n, vector<int>(m, -1));
    
    for(int i = 0; i < n; i++){
        string s;
        cin >> s;
        for(int j = 0; j < m; j++){
            if (s[j] == 'T'){
                x = i;
                y = j;
            }
            a[i][j] = (s[j] == '#');
        }
    }
    bfs(a, d, 1, 1);
    
    cout << d[n - 2][m - 2] << "\n";
    
    
    vector<vector<int>> t(n, vector<int>(m, -1));
    bfs(a, t, x, y);
    
    if(t[n - 2][m - 2] <= d[n - 2][m - 2]) cout << "No" << "\n";
    else cout << "Yes" << "\n";
    return 0;
}

